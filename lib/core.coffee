###
  terminal-plus
  Copyright by isis97
  MIT licensed

  The very basic class, which handles the configuration files, loads up commands and
  answers all the commands requests generated by terminal instance.
###

{resolve, dirname, extname} = require 'path'
fs = require 'fs'

class TerminalPlusCore

  state:
    config: {}
    statePath: null
    opened: false
    customCommands: {}
    defaultCommands:
      "hello_world": {
        "description": "Prints the hello world message to the terminal output."
        "command": [
          "echo Hello world :D",
          "echo This is",
          "echo example usage",
          "echo of the console"
        ]
      }

  defaultCommandsFile: () ->
    return initialContent = {
      '_comment': 'Package terminal-plus: This terminal-commands.json file was automatically generated by atom-terminal-package. It contains all useful config data.'
      commands: @state.defaultCommands
      actions: []
      toolbar: [
        ["clear", "clear", "Clears the console output."],
        ["info", "info", "Prints the terminal welcome message."],
        ["all available commands", "memdump", "Displays all available builtin commands. (all commands except native)"]
      ]
      rules: {
        "\\b[A-Z][A-Z]+\\b": {
          'match': {
            'flags': ['g']
          }
          'css': {
            'color':'gray'
          }
        }
        '(error|err):? (.*)': {
          'match': {
            'matchLine': true
            'replace': '%(label:error:text:Error) %(0)'
          }
          'css': {
            'color': 'red'
            'font-weight': 'bold'
          }
        }
        '(warning|warn|alert):? (.*)': {
          'match': {
            'matchLine': true
            'replace': '%(label:warning:text:Warning) %(0)'
          }
          'css': {
            'color': 'yellow'
          }
        }
        '(note|info):? (.*)': {
          'match': {
            'matchLine': true
            'replace': '%(label:info:text:Info) %(0)'
          }
          'css': {

          }
        }
        '(debug|dbg):? (.*)': {
          'match': {
            'matchLine': true
            'replace': '%(label:default:text:Debug) %(0)'
          }
          'css': {
            'color': 'gray'
          }
        }
      }
    }

  createDefaultCommandsFile: () ->
    if atom.config.get('terminal-plus.enableUserCommands')
      try
        content = JSON.stringify @defaultCommandsFile(), null, '\t'
        fs.writeFileSync @state.statePath, content
      catch e
        console.log 'atp-core cannot create default terminal commands JSON file', e.message

  reload: () ->
    @state.opened = false
    @init()

  init: () ->
    if not @state.opened
      @state.opened = true
      @state.statePath = dirname(atom.config.getUserConfigPath()) + '/terminal-commands.json'
      try
        @state.config = JSON.parse fs.readFileSync @state.statePath
        @state.customCommands = @state.config.commands
      catch e
        atom.notifications.addWarning 'Terminal-Plus: Failed to load terminal configuration file', {detail:e.message}
        @state.config = @defaultCommandsFile()
        @state.customCommands = @state.defaultCommands
    return this

  jsonCssToInlineStyle: (obj) ->
    if obj instanceof String
      return obj
    ret = ''
    for key, value of obj
      if key? and value?
        ret += key + ':' + value + ';'
    return ret

  getConfig: () ->
    return @state.config

module.exports = new TerminalPlusCore()
